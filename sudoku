import tkinter as tk
from tkinter import messagebox

def find_empty(bo):
    for i in range(9):
        for j in range(9):
            if bo[i][j] == 0:
                return (i, j)  # row, col
    return None

def valid(bo, num, pos):
    # Check row
    for i in range(len(bo[0])):
        if bo[pos[0]][i] == num and pos[1] != i:
            return False

    # Check column
    for i in range(len(bo)):
        if bo[i][pos[1]] == num and pos[0] != i:
            return False

    # Check box
    box_x = pos[1] // 3
    box_y = pos[0] // 3

    for i in range(box_y * 3, box_y * 3 + 3):
        for j in range(box_x * 3, box_x * 3 + 3):
            if bo[i][j] == num and (i, j) != pos:
                return False

    return True

def solve(bo):
    find = find_empty(bo)
    if not find:
        return True
    else:
        row, col = find

    for i in range(1, 10):
        if valid(bo, i, (row, col)):
            bo[row][col] = i

            if solve(bo):
                return True

            bo[row][col] = 0  # Backtrack

    return False

def create_grid():
    grid = []
    for i in range(9):
        row = []
        for j in range(9):
            try:
                val = int(entries[i][j].get())
                if 0 <= val <= 9:  # Allow 0 for empty cells
                    row.append(val)
                else:
                    row.append(0) # Treat invalid input as empty
            except ValueError:
                row.append(0) # Treat non-integer input as empty
        grid.append(row)
    return grid

def solve_sudoku():
    grid = create_grid()
    if solve(grid):
        for i in range(9):
            for j in range(9):
                entries[i][j].delete(0, tk.END)  # Clear current value
                entries[i][j].insert(0, grid[i][j]) # Insert solved value
    else:
        messagebox.showinfo("No Solution", "No solution exists for this Sudoku puzzle.")

# GUI Setup
window = tk.Tk()
window.title("Sudoku Solver")

entries = []
for i in range(9):
    row_entries = []
    for j in range(9):
        entry = tk.Entry(window, width=2, font=("Arial", 20), justify="center")
        entry.grid(row=i, column=j, padx=2, pady=2)
        row_entries.append(entry)
    entries.append(row_entries)

solve_button = tk.Button(window, text="Solve", command=solve_sudoku)
solve_button.grid(row=9, column=0, columnspan=9, pady=10)


window.mainloop()
